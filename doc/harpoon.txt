*harpoon.txt*           For NVIM v0.8.0          Last change: 2023 December 18

==============================================================================
Table of Contents                                  *harpoon-table-of-contents*

1. Config                                                     |harpoon-config|
2. Settings                                                 |harpoon-settings|
3. Highlight Groups                                 |harpoon-highlight-groups|
4. Logger                                                     |harpoon-logger|
You can define custom behavior of a harpoon list by providing your own calls.

Here is a simple example where i create a list named `cmd` that takes the
current line in the editor and adds it to harpoon menu. When `list:select(...)`
is called, we take the contents of the line and execute it as a vim command

I don’t think this is a great use of harpoon, but its meant to show how to
add your own custom lists. You could imagine that a terminal list would be just
as easy to create.

>lua
    local harpoon = require("harpoon")
    
    harpoon:setup({
        -- Setting up custom behavior for a list named "cmd"
        "cmd" = {
    
            -- When you call list:append() this function is called and the return
            -- value will be put in the list at the end.
            --
            -- which means same behavior for prepend except where in the list the
            -- return value is added
            --
            -- @param possible_value string only passed in when you alter the ui manual
            add = function(possible_value)
                -- get the current line idx
                local idx = vim.fn.line(".")
    
                -- read the current line
                local cmd = vim.api.nvim_buf_get_lines(0, idx - 1, idx, false)[1]
                if cmd == nil then
                    return nil
                end
    
                return {
                    value = cmd,
                    context = { ... any data you want ... },
                }
            end,
    
            --- This function gets invoked with the options being passed in from
            --- list:select(index, <...options...>)
            --- @param list_item {value: any, context: any}
            --- @param list { ... }
            --- @param option any
            select = function(list_item, list, option)
                -- WOAH, IS THIS HTMX LEVEL XSS ATTACK??
                vim.cmd(list_item.value)
            end
    
        }
    })
<


==============================================================================
1. Config                                                     *harpoon-config*

There is quite a bit of behavior you can configure via `harpoon:setup()`

- `settings`: is the global settings. as of now there isn’t a global setting in use, but once we have some custom behavior i’ll put them here
- `default`: the default configuration for any list. it is simply a file harpoon
- `[name] = HarpoonPartialConfigItem`: any named lists config. it will be merged with `default` and override any behavior

**HarpoonPartialConfigItem Definition**

>
    ---@class HarpoonPartialConfigItem
    ---@field encode? (fun(list_item: HarpoonListItem): string)
    ---@field decode? (fun(obj: string): any)
    ---@field display? (fun(list_item: HarpoonListItem): string)
    ---@field select? (fun(list_item?: HarpoonListItem, list: HarpoonList, options: any?): nil)
    ---@field equals? (fun(list_line_a: HarpoonListItem, list_line_b: HarpoonListItem): boolean)
    ---@field add? fun(item: any?): HarpoonListItem
    ---@field BufLeave? fun(evt: any, list: HarpoonList): nil
    ---@field VimLeavePre? fun(evt: any, list: HarpoonList): nil
    ---@field get_root_dir? fun(): string
<

**Detailed Definitions** * `encode`: how to encode the list item to the harpoon
file. if encode is `false`, then the list will not be saved to disk (think
terminals) * `decode`: how to decode the list * `display`: how to display the
list item in the ui menu * `select`: the action taken when selecting a list
item. called from `list:select(idx, options)` * `equals`: how to compare two
list items for equality * `add`: called when `list:append()` or
`list:prepend()` is called. called with an item, which will be a string, when
adding through the ui menu * `BufLeave`: this function is called for every list
on BufLeave. if you need custom behavior, this is the place * `VimLeavePre`:
this function is called for every list on VimLeavePre. * `get_root_dir`: used
for creating relative paths. defaults to `vim.loop.cwd()`


==============================================================================
2. Settings                                                 *harpoon-settings*

Settings can alter the experience of harpoon

**Definition**

>lua
    ---@class HarpoonSettings
    ---@field save_on_toggle boolean defaults to false
    ---@field sync_on_ui_close boolean defaults to false
    ---@field key (fun(): string)
<

**Descriptions** * `save_on_toggle`: any time the ui menu is closed then we
will save the state back to the backing list, not to the fs *
`sync_on_ui_close`: any time the ui menu is closed then the state of the list
will be sync’d back to the fs * `key` how the out list key is looked up. This
can be useful when using worktrees and using git remote instead of file path

**Defaults**

>lua
    settings = {
        save_on_toggle = false,
        sync_on_ui_close = false,
        key = function()
            return vim.loop.cwd()
        end,
    },
<


==============================================================================
3. Highlight Groups                                 *harpoon-highlight-groups*

TODO: Fill in the idea that we will emit out window information


==============================================================================
4. Logger                                                     *harpoon-logger*

This can help debug issues on other’s computer. To get your debug log please
do the following.

1. open up a new instance of vim
2. perform exact operation to cause bug
3. execute vim command `:lua require("harpoon").logger:show()` and copy the buffer
4. paste the buffer as part of the bug creation

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
